TRUE && check_trials(trial)
}
# private function to calculate mean
aux_mean <- function(trials, prob) {
trials * prob
}
# private function to calculate variance
aux_variance <- function(trials, prob) {
trials * prob * (1 - prob)
}
# private function to calculate mode
aux_mode <- function(trials, prob) {
if (is.integer(trials * prob + prob)){
c(trials * prob + prob, trials * prob + prob - 1)
} else {
floor(trials * prob + prob)
}
}
# private function to calculate skewness
aux_skewness <- function(n, p) {
(1-2*p) / sqrt(n*p*(1-p))
}
# private function to calculate kurtosis
aux_kurtosis <- function(n, p) {
(1-6*p*(1-p)) / (n*p*(1-p))
}
#' @title bin_choose
#' @description calculate the number of combinations k successes occur in n trials
#' @param k number of successes
#' @param n number of trials
#' @return the number of combinations
#' @export
#' @examples
#' bin_choose(5, 0)
#'
#' bin_choose(n = 5, k = 2)
bin_choose <- function(n, k) {
check_success(k, n)
check_trials(n)
factorial(n) / (factorial(k) * factorial(n-k))
}
#' @title bin_probability
#' @description calculate the probability of getting k successes with probability p in n trials
#' @param k number of successes
#' @param n number of trials
#' @param p probability of success
#' @return the probability of getting k successes with probability p in n trials
#' @export
#' @examples
#' bin_probability(k = 2, n = 5, p = 0.5)
#'
#' bin_probability(k = 0:2, n = 5, p = 0.5)
bin_probability <- function(k, n, p) {
if (!check_success(k, n)) {
stop ('invalid success value')
}
if (!check_trials(n)) {
stop ('invalid trials value')
}
if (!check_prob(p)) {
stop ('invalid probability value')
}
bin_choose(n, k) * p^k * (1-p)^(n-k)
}
#' @title bin_distribution
#' @description calculate the distribution of probabilities of getting different number of successes
#' @param n number of trials
#' @param p probability of success
#' @return a dataframe with two classes of the probability ditribution
#' @export
#' @examples
#' bin_distribution(n = 5, p = 0.5)
library(dplyr)
bin_distribution <- function(n, p) {
if (!check_trials(n)) {
stop ('invalid trials value')
}
if (!check_prob(p)) {
stop ('invalid probability value')
}
output = data.frame(success = 0:n)
output2 = output %>% mutate(probability = bin_probability(output$success, n, p))
class(output2) = c("bindis", "data.frame")
output2
}
#' @export
plot.bindis = barplot()
dis1 <- bin_distribution(  5,  0.5)
barplot(dis1)
plot(dist1)
plot(dis1)
barplot(dis1$success, dis1$probability)
barplot( dis1$probability, dis1$success)
library(ggplot2)
ggplot(dis1)
barplot(dis1, dis1$success, dis1$probability)
barplot(dis1)
ggplot(dis1, aes(x = dis1$success, y = dis1$probability)) +geom_bar()
ggplot(dis1) +geom_bar( aes(x = dis1$success, y = dis1$probability))
ggplot(dis1, aes(x = dis1$success, y = dis1$probability)) +geom_bar(stat = "identity")
ggplot(dis1, aes(x = dis1$success, y = dis1$probability, xlab = "success")) +geom_bar(stat = "identity")
ggplot(dis1, aes(x = dis1$success, y = dis1$probability)) +geom_bar(stat = "identity", xlab = "d")
ggplot(dis1, aes(x = dis1$success, y = dis1$probability)) +geom_bar(stat = "identity", aes(xlab = "d"))
#' @export
plot.bindis = function(bindis) {
success = bindis$success
probability = bindis$probability
ggplot(dis1, aes(x = success, y = probability))
+ geom_bar(stat = "identity")
}
plot(dis1)
#' @export
plot.bindis = function(bindis) {
success = bindis$success
probability = bindis$probability
ggplot(dis1, aes(x = success, y = probability)) +
geom_bar(stat = "identity")
}
plot(dis1)
# extracting first table
xml_table1 <-  read_html(team_url)%>%
html_nodes("table")
---
title: "lab12-raina-yang"
author: "Raina Yang"
date: "4/26/2019"
output: html_document
---
```{r}
library(XML)
library(xml2)
library(rvest)
library(magrittr)
# Assemble url (so it fits on screen)
basket <- "https://www.basketball-reference.com"
nba_html <- paste0(basket, "/leagues/NBA_2017.html")
xml_doc <- read_html(nba_html)
xml_text <- xml_doc %>% html_text()
xml_doc %>%
html_nodes("h2") %>%
html_text()
xml_doc %>%
html_nodes("h1") %>%
html_text()
xml_doc %>%
html_nodes("strong") %>%
html_text()
xml_doc %>%
html_nodes("button") %>%
html_text()
# node with an attribute
xml_doc %>%
html_nodes("p.listhead") %>%
html_text()
xml_doc %>%
html_nodes(xpath = '//p[@class="listhead"]') %>%
html_text()
xml_doc %>%
html_nodes(xpath = '//ul[@class=""]//a') %>%
html_text()
# extracting first table
xml_table1 <- xml_doc %>%
html_nodes("table") %>%
extract(1)
class(xml_table1)
tbl1 <- html_table(xml_table1)
head(tbl1)
# extracting second table
xml_table2 <- xml_doc %>%
html_nodes("table") %>%
extract(2)
# two html tables
xml_tables <- xml_doc %>%
html_nodes("table") %>%
extract(1:2)
# extract names of teams
xml_tables %>%
html_nodes("a") %>%
html_text()
# href attributes
hrefs = paste0(xml_tables %>%
html_nodes("a") %>%
html_attr("href"))
library(stringr)
teams = str_extract(hrefs, "[A-Z]+")
teams
files = paste0(teams, "-roster-2017.csv")
files
team <- paste0("/teams/", hrefs[1], "/2017.html")
team_url <- paste0(basket, team)
team_url
# extracting first table
xml_table1 <-  read_html(team_url)%>%
html_nodes("table")
class(xml_table1)
tbl1 <- html_table(xml_table1)
head(tbl1)
```
---
title: "lab12-raina-yang"
author: "Raina Yang"
date: "4/26/2019"
output: html_document
---
```{r}
library(XML)
library(xml2)
library(rvest)
library(magrittr)
# Assemble url (so it fits on screen)
basket <- "https://www.basketball-reference.com"
nba_html <- paste0(basket, "/leagues/NBA_2017.html")
xml_doc <- read_html(nba_html)
xml_text <- xml_doc %>% html_text()
xml_doc %>%
html_nodes("h2") %>%
html_text()
xml_doc %>%
html_nodes("h1") %>%
html_text()
xml_doc %>%
html_nodes("strong") %>%
html_text()
xml_doc %>%
html_nodes("button") %>%
html_text()
# node with an attribute
xml_doc %>%
html_nodes("p.listhead") %>%
html_text()
xml_doc %>%
html_nodes(xpath = '//p[@class="listhead"]') %>%
html_text()
xml_doc %>%
html_nodes(xpath = '//ul[@class=""]//a') %>%
html_text()
# extracting first table
xml_table1 <- xml_doc %>%
html_nodes("table") %>%
extract(1)
class(xml_table1)
tbl1 <- html_table(xml_table1)
head(tbl1)
# extracting second table
xml_table2 <- xml_doc %>%
html_nodes("table") %>%
extract(2)
# two html tables
xml_tables <- xml_doc %>%
html_nodes("table") %>%
extract(1:2)
# extract names of teams
xml_tables %>%
html_nodes("a") %>%
html_text()
# href attributes
hrefs = paste0(xml_tables %>%
html_nodes("a") %>%
html_attr("href"))
library(stringr)
teams = str_extract(hrefs, "[A-Z]+")
teams
files = paste0(teams, "-roster-2017.csv")
files
team <- paste0("/teams/", hrefs[1], "/2017.html")
team_url <- paste0(basket, team)
team_url
```
library(xml2)
plot(dis1)
# extracting table
xml_table1 <-  read_html(team_url)%>%
html_nodes("table")
team_url
team <- paste0("/teams/", hrefs[1])
team_url <- paste0(basket, team)
team_url
xml_table1 <-  read_html(team_url)%>%
html_nodes("table")
team <- paste0(hrefs[1])
team_url <- paste0(basket, team)
team_url
# extracting table
xml_table1 <-  read_html(team_url)%>%
html_nodes("table")
class(xml_table1)
tbl1 <- html_table(xml_table1)
roster <- html_table(xml_table1)
head(roster)
write.csv(roster, "BOS-roster-2017.csv")
for(i in 1:7) {
team <- paste0(hrefs[i])
team_url <- paste0(basket, team)
team_url
# extracting table
xml_table1 <-  read_html(team_url)%>%
html_nodes("table")
roster <- html_table(xml_table1)
head(roster)
write.csv(roster, paste0(team, "-roster-2017.csv"))
}
hrefs
# href attributes
hrefs = paste0(xml_tables %>%
html_nodes("a") %>%
html_attr("href"))
library(stringr)
teams = str_extract(hrefs, "[A-Z]+")
teams
files = paste0(teams, "-roster-2017.csv")
files
team <- paste0(hrefs[1])
team_url <- paste0(basket, team)
team_url
# extracting table
xml_table1 <-  read_html(team_url)%>%
html_nodes("table")
roster <- html_table(xml_table1)
head(roster)
write.csv(roster, "BOS-roster-2017.csv")
roster
for(i in 1:7) {
team <- paste0(hrefs[i])
team_url <- paste0(basket, team)
team_url
# extracting table
xml_table1 <-  read_html(team_url)%>%
html_nodes("table")
roster <- html_table(xml_table1)
head(roster)
write.csv(roster, paste0(team, "-roster-2017.csv"))
}
team <- paste0(hrefs[2])
team_url <- paste0(basket, team)
team_url
# extracting table
xml_table1 <-  read_html(team_url)%>%
html_nodes("table")
roster <- html_table(xml_table1)
head(roster)
write.csv(roster, paste0(team, "-roster-2017.csv"))
# extracting table
xml_table1 <-  read_html(team_url)%>%
html_nodes("table")
roster <- html_table(xml_table1)
head(roster)
write.csv(roster, "BOS-roster-2017.csv")
team <- hrefs[1]
for(i in 1:7) {
team <- paste0(hrefs[i])
team_url <- paste0(basket, team)
team_url
# extracting table
xml_table1 <-  read_html(team_url)%>%
html_nodes("table")
roster <- html_table(xml_table1)
head(roster)
write.csv(roster, paste0(team, "-roster-2017.csv"))
}
for(i in 1:7) {
team <- paste0(hrefs[i])
team_url <- paste0(basket, team)
team_url
# extracting table
xml_table1 <-  read_html(team_url)%>%
html_nodes("table")
roster <- html_table(xml_table1)
head(roster)
write.csv(roster, paste0(team, "-roster-2017.csv"))
}
file.exists('/teams/BOS/2017.html-roster-2017.csv')
team
for(i in 1:7) {
team <- paste0(hrefs[i])
team_url <- paste0(basket, team)
team_url
# extracting table
xml_table1 <-  read_html(team_url)%>%
html_nodes("table")
roster <- html_table(xml_table1)
head(roster)
write.csv(roster, paste0(teams[i], "-roster-2017.csv"))
}
bin_choose(5, 1:3)
devtools::test()
devtools::test()
== 3 isn't true.
bin_choose(5,2)
bin_choose(5, 1:3)
typeof(bin_choose(5, 1:3))
c(5,10,10)
bin_choose(5, 1:3)==c(5,10,10)
c(5,10,10)
bin_choose(5, 1) == 3
devtools::test()
bin_probability(0:2, 5, 0.5)
devtools::test()
data.frame("success" = c(0:5), "probability" = c(0.03125,
0.15625,
0.31250,
0.31250,
0.15625,
0.03125))
bin_distribution( 5, 0.5)
aux_skewness(10, 0.3)
aux_skewness(10, 0.3) == 0.2760262
0.2760262
aux_kurtosis(10, 0.3)
devtools::build_vignettes()
devtools::test()
devtools::test()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
devtools::check_man()
devtools::build_vignettes()
devtools::build_vignettes()
# binomial probability distribution
bin_distribution( 5, 0.5)
# binomial cumulative distribution
bin_cumulative( 5, 0.5)
# plotting binomial probability distribution
dis1 <- bin_distribution(trials = 5, prob = 0.5) plot(dis1)
devtools::build_vignettes()
---
title: "Workout 3 Binomial"
author: "Raina Yang"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
%\VignetteIndexEntry{Introduction to Binomial}
%\VignetteEngine{knitr::rmarkdown}
%\VignetteEncoding{UTF-8}
---
```{r, echo = FALSE, message = FALSE}
knitr::opts_chunk$set(collapse = T, comment = "#>")
library(workout03)
```
## Purpose of Package workout3: binomial
The purpose of this package "workout3" is to create an R package that implements functions for calculating probabilities of a Binomial random variable, and related calculations such as the probability distribution, the expected value, variance, etc.
## Calculations and Functions
The following functions are main functions for calculations.
– bin_choose()
– bin_probability()
– bin_distribution()
– bin_cumulative()
bin_choose() that calculates the number of
combinations in which k successes can occur in n trials.
such as
```{r}
bin_choose( 5, 2 )== 10
```
bin_probability() takes three arguments: success, trials, and prob.
such as
```{r}
# probability of getting 2 successes in 5 trials
# (assuming prob of success = 0.5)
bin_probability( 2, 5, 0.5)
```
bin_distribution() has two arguments trials, and prob.
such as
```{r}
# binomial probability distribution
bin_distribution( 5, 0.5)
```
bin_cumulative() has two arguments trials, and prob.
such as
```{r}
# binomial cumulative distribution
bin_cumulative( 5, 0.5)
```
## Plot and summary
By using the function plot or summary, the user can generate systematic summary or visual information regarding the data.
for instance
```{r}
# plotting binomial probability distribution
dis1 <- bin_distribution( 5, 0.5)
plot(dis1)
# plotting binomial cumulative distribution
dis2 <- bin_cumulative( 5,  0.5)
plot(dis2)
bin1 <- bin_variable( 10,  0.3)
bin1
binsum1 <- summary(bin1)
binsum1
```
bin_choose( 5, 2 )== 10
# probability of getting 2 successes in 5 trials
# (assuming prob of success = 0.5)
bin_probability( 2, 5, 0.5)
# binomial probability distribution
bin_distribution( 5, 0.5)
# binomial cumulative distribution
bin_cumulative( 5, 0.5)
# plotting binomial probability distribution
dis1 <- bin_distribution( 5, 0.5)
plot(dis1)
# plotting binomial cumulative distribution
dis2 <- bin_cumulative( 5,  0.5)
plot(dis2)
bin1 <- bin_variable( 10,  0.3)
bin1
binsum1 <- summary(bin1)
binsum1
devtools::build_vignettes()
# binomial probability distribution
bin_distribution(5, 0.5)
# binomial probability distribution
dis1 <- bin_distribution( 5, 0.5)
dis1
